package network

import (
	"encoding/json"
	"fmt"
	"log"
	"net"
	"time"
)

var client_port int = 30056
var master_port int = 30057
var client_backup_port int = 30058
var master_backup_port int = 30059

type ID string

const InvalidID ID = ""

type Heartbeat struct {
	Counter int
}

type Message struct {
	Heartbeat Heartbeat
}

type Packet struct {
	Address ID
	Data    []byte
}

func EncodeMessage(m Message) ([]byte, error) {

	result, err := json.Marshal(m)
	if err != nil {
		log.Fatal(err)
	}

	return result, err
}

func DecodeMessage(b []byte) (Message, error) {
	var result Message
	err := json.Unmarshal(b, &result)
	if err != nil {
		log.Fatal(err)
	}
	return result, err
}


func getSenderID(sender *net.UDPAddr) ID {
	return ID(sender.IP.String())
}

func GetMachineID() ID {
	ifaces, err := net.InterfaceAddrs()
	if err != nil {
		log.Fatal(err)
	}
	for _, addr := range ifaces {
		if ip_addr, ok := addr.(*net.IPNet); ok && !ip_addr.IP.IsLoopback() {
			if v4 := ip_addr.IP.To4(); v4 != nil {
				return ID(v4.String())
			}
		}
	}
	return "127.0.0.1"
}

func listen(socket *net.UDPConn, incoming chan Packet, quit chan bool) {
	for {
		select {
		case <-quit:
			//We are no longer a backup
			fmt.Println("Closing listen")

			//Quit goroutine
			socket.Close()
			return
		default:
			setDeadLine(socket, time.Now())
			bytes := make([]byte, 1024)
			read_bytes, sender, err := socket.ReadFromUDP(bytes)

			if err == nil {
				incoming <- Packet{getSenderID(sender), bytes[:read_bytes]}
			}

			if err != nil && !err.(net.Error).Timeout() {
				log.Println(err)
			}
		}
	}
}

func broadcast(socket *net.UDPConn, to_port int, outgoing chan Packet, quit chan bool) {
	bcast_addr := fmt.Sprintf("255.255.255.255:%d", to_port)
	remote, err := net.ResolveUDPAddr("udp", bcast_addr)
	if err != nil {
		log.Fatal(err)
	}
	for {

		packet := <-outgoing
		_, err := socket.WriteToUDP(packet.Data, remote)
		if err != nil {
			log.Println(err)
		}

	}
}

func setDeadLine(socket *net.UDPConn, t time.Time) {

	err := socket.SetReadDeadline(t.Add(time.Millisecond * 2000))

	if err != nil && !err.(net.Error).Timeout() {
		log.Fatal(err)
	}

}

func bind(port int) *net.UDPConn {
	local, err := net.ResolveUDPAddr("udp", fmt.Sprintf(":%d", port))
	if err != nil {
		log.Fatal(err)
	}

	socket, err := net.ListenUDP("udp", local)
	if err != nil {
		log.Fatal(err)
	}
	return socket
}

func ClientWorker(from_master, to_master chan Packet, quit chan bool) {
	socket := bind(client_port)
	go listen(socket, from_master, quit)
	broadcast(socket, master_port, to_master, quit)
	socket.Close()
}

func MasterWorker(from_client, to_clients chan Packet, quit chan bool) {
	socket := bind(master_port)
	go listen(socket, from_client, quit)
	broadcast(socket, client_port, to_clients, quit)
	socket.Close()
}

func ClientBackupWorker(from_master, to_master chan Packet, quit chan bool) {
	socket := bind(client_backup_port)
	listen(socket, from_master, quit)
	socket.Close()
}

func MasterBackupWorker(from_client, to_clients chan Packet, quit chan bool) {
	socket := bind(master_backup_port)
	broadcast(socket, client_backup_port, to_clients, quit)
	socket.Close()
}
